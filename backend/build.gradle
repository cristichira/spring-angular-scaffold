buildscript {
    ext {
        springBootVersion = "2.2.5.RELEASE"
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("net.ltgt.gradle:gradle-apt-plugin:0.21")
    }
}

dependencies {
    compile project(':frontend')
}

subprojects { proj ->
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'net.ltgt.apt'

    group = rootProject.group
    version = rootProject.version

    sourceCompatibility = 11

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
        }

        dependencies {
            dependency('mysql:mysql-connector-java:8.0.26')
            dependency('org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE')
            dependency('org.mapstruct:mapstruct:1.3.1.Final')
            dependency('org.mapstruct:mapstruct-processor:1.3.1.Final')
            dependency('org.springdoc:springdoc-openapi-ui:1.4.3')
            dependency('org.springdoc:springdoc-openapi-data-rest:1.4.3')
            dependency('io.jsonwebtoken:jjwt:0.9.1')
            dependency('org.apache.poi:poi:4.1.2')
            dependency('org.apache.poi:poi-ooxml:4.1.2')
            dependency('com.amazonaws:aws-java-sdk-core:1.12.84')
            dependency('com.amazonaws:aws-java-sdk-s3:1.12.84')
            dependency('net.coobird:thumbnailator:0.4.14')
        }
    }

    dependencies {
        compile('org.springframework.boot:spring-boot-starter-web')
        compile('org.springframework.boot:spring-boot-devtools')
        compile('org.springframework.boot:spring-boot-starter')
        compile('org.springframework.boot:spring-boot-starter-security')
        compile('org.apache.commons:commons-lang3')
        compile('org.springdoc:springdoc-openapi-data-rest')
        compile('org.springdoc:springdoc-openapi-ui')

        testImplementation("org.springframework.boot:spring-boot-starter-test")

        compile('org.mapstruct:mapstruct-processor')
        compile('org.mapstruct:mapstruct')

        annotationProcessor('org.mapstruct:mapstruct-processor')

        compile('org.springframework.boot:spring-boot-starter-data-jpa')
        runtimeOnly('mysql:mysql-connector-java')
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs = [
                '-Amapstruct.defaultComponentModel=spring',
                '-Amapstruct.unmappedTargetPolicy=ERROR'
        ]

        options.encoding = 'UTF-8'
    }

    def projectName = proj.name
    if (projectName.endsWith('-server')) {
        apply plugin: 'org.springframework.boot'
    }
}
